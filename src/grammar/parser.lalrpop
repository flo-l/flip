use std::str::FromStr;
use std::iter;
use ::value::Value;
use ::grammar::unescape_string;
use super::lexer::{Token, Error};

grammar<'input>(text: &'input str);

extern {
    type Location = usize;
    type Error = Error;

    enum Token<'input> {
        OpenParen => Token::OpenParen,
        ClosingParen => Token::ClosingParen,
        Dot => Token::Dot,
        Quote => Token::Quote,
        WhiteSpace => Token::WhiteSpace,
        Chr => Token::Char(<char>),
        Int => Token::Integer(<i64>),
        Str => Token::String(<&'input str>),
        Sym => Token::Symbol(<&'input str>),
    }
}

pub Char: Value = {
    <c:Chr> => Value::new_char(c),
};

pub Integer: Value = {
    <i:Int> => Value::new_integer(i),
};

pub Symbol: Value = {
   <s:Sym> => {
       match s {
           "true" => Value::new_bool(true),
           "false" => Value::new_bool(false),
           s => Value::new_symbol(s),
       }
   },
};

pub String: Value = {
   <s:Str> => Value::new_string(unescape_string(s)),
};

EmptyList: Value = {
    OpenParen WhiteSpace? ClosingParen => Value::empty_list(),
};

pub Pair: Value = {
    OpenParen WhiteSpace? <a:Item> WhiteSpace Dot WhiteSpace <b:Item> WhiteSpace? ClosingParen
    => Value::new_pair(a, b),
};

pub List: Value = {
    EmptyList,
    OpenParen WhiteSpace? <v:(Item WhiteSpace)*> <last:Item> WhiteSpace? ClosingParen => {
        let values: Vec<Value> = v.into_iter().map(|(v, _)| v).chain(iter::once(last)).collect();
        Value::new_list(&values)
    },
};

Item: Value = {
    Char,
    Integer,
    Symbol,
    String,
    Pair,
    List,
};
