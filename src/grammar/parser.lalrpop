use std::iter;
use ::value::Value;
use ::string_interner::StringInterner;
use ::grammar::lexer::{unescape_string, Token};
use ::grammar::NO_INTERNER_ERROR_STRING;
use ::grammar::error::Error;

#[LALR]
grammar<'input>(text: &'input str, interner_valid: bool, interner: &mut StringInterner);

extern {
    type Location = usize;
    type Error = Error;

    enum Token<'input> {
        OpenParen => Token::OpenParen,
        ClosingParen => Token::ClosingParen,
        Dot => Token::Dot, // unused for now
        QuoteTick => Token::QuoteTick,
        WhiteSpace => Token::WhiteSpace,
        True => Token::True,
        False => Token::False,
        Begin => Token::Begin,
        Define => Token::Define,
        If => Token::If,
        Let => Token::Let,
        Loop => Token::Loop,
        Lambda => Token::Lambda,
        Recur => Token::Recur,
        Quote => Token::Quote,
        Chr => Token::Char(<char>),
        Int => Token::Integer(<i64>),
        Str => Token::String(<&'input str>),
        Sym => Token::Symbol(<&'input str>),
    }
}

// PRIMITIVES
Bool: Value = {
    True => Value::new_bool(true),
    False => Value::new_bool(false),
};

Char: Value = {
    <c:Chr> => Value::new_char(c),
};

pub Integer: Value = {
    <i:Int> => Value::new_integer(i),
};

String: Value = {
   <s:Str> => Value::new_string(unescape_string(s)),
};

// things that are "auto quoting, i.e. these are always parsed the same no matter in which context"
Primitive: Value = {
    Bool,
    Char,
    Integer,
    String,
};

EmptyList: Value = {
    OpenParen WhiteSpace? ClosingParen => Value::empty_list(),
};
// --------------------------------------

// SYMBOLS
// all valid symbols
Symbol: Value = {
    NonSpecialSymbol,
    SpecialSymbol,
};

// symbol which is the name of a special form
SpecialTextualSymbol: &'input str = {
    Begin => &"begin",
    Define => &"define",
    If => &"if",
    Let => &"let",
    Loop => &"loop",
    Lambda => &"lambda",
    Recur => &"recur",
    Quote => &"quote",
};

// as value
SpecialSymbol: Value = {
    <SpecialTextualSymbol> => Value::new_symbol(interner.intern(<>))
};

// symbol which is not the name of a special form
NonSpecialSymbol: Value = {
    <Sym> => Value::new_symbol(interner.intern(<>))
};

// any symbol as string
TextualSymbol: &'input str = {
    Sym,
    SpecialTextualSymbol,
};

// --------------------------------------

// QUOTED stuff
// code as data, without special forms
SimpleItem: Value = {
    Primitive,
    Symbol,
    SimpleList,
    QuoteTick <SimpleItem> => {
        Value::new_list(&[Value::new_symbol(interner.intern("quote")), <>])
    },
    // transformation of (quote ..) not necessary, as the code is treated as data anyway
};

SimpleList: Value = {
    EmptyList,

    // 1+ elements
    OpenParen WhiteSpace? <v:(SimpleItem WhiteSpace)*> <last:SimpleItem> WhiteSpace? ClosingParen => {
        let start = v.into_iter().map(|(v, _)| v);
        let last = iter::once(last);
        let values: Vec<Value> = start.chain(last).collect();
        Value::new_list(&values)
    },
};
// --------------------------------------

// UNQUOTED stuff
// code as code, with special forms
List: Value = {
    EmptyList,

    // one element
    OpenParen WhiteSpace? <elem: NonSpecialItem> WhiteSpace? ClosingParen => {
        Value::new_list(&[elem])
    },

    // 2+ elements
    OpenParen WhiteSpace? <first: NonSpecialItem> WhiteSpace <v:(Item WhiteSpace)*> <last:Item> WhiteSpace? ClosingParen => {
        let first = iter::once(first);
        let middle = v.into_iter().map(|(v, _)| v);
        let last = iter::once(last);
        let values: Vec<Value> = first.chain(middle).chain(last).collect();
        Value::new_list(&values)
    },
};

#[inline]
Code: Vec<Value> = {
    <code:(WhiteSpace Item)+> => {
        code.into_iter().map(|(_, v)| v).collect()
    }
};

SpecialFormBegin: Value = {
    OpenParen WhiteSpace? Begin <code:Code> WhiteSpace? ClosingParen => {
        let begin = iter::once(Value::new_symbol(interner.intern("begin")));
        let values: Vec<Value> = begin.chain(code.into_iter()).collect();
        Value::new_list(&values)
    },
};

SpecialFormBeginTailCall: Value = {
    OpenParen WhiteSpace? Begin <code:Code?> WhiteSpace <last:TailCall> WhiteSpace? ClosingParen => {
        let begin = iter::once(Value::new_symbol(interner.intern("begin")));
        let code = code.into_iter().flat_map(|x| x.into_iter());
        let last = iter::once(last);
        let values: Vec<Value> = begin.chain(code).chain(last).collect();
        Value::new_list(&values)
    },
};

SpecialFormDefine: Value = {
    OpenParen WhiteSpace? Define WhiteSpace <name:TextualSymbol> WhiteSpace <expr:Item> WhiteSpace? ClosingParen => {
        // unwrap safe because type is checked by parser
        Value::new_define(interner.intern(name), expr)
    },
};

SpecialFormIf: Value = {
    OpenParen WhiteSpace? If WhiteSpace <cond:Item> WhiteSpace <then:Item> WhiteSpace <els:Item> WhiteSpace? ClosingParen => {
        Value::new_if(cond, then, els)
    },
};

SpecialFormIfTailCall: Value = {
    OpenParen WhiteSpace? If WhiteSpace <cond:Item> WhiteSpace <then:TailCall> WhiteSpace <els:Item> WhiteSpace? ClosingParen => {
        Value::new_if(cond, then, els)
    },

    OpenParen WhiteSpace? If WhiteSpace <cond:Item> WhiteSpace <then:Item> WhiteSpace <els:TailCall> WhiteSpace? ClosingParen => {
        Value::new_if(cond, then, els)
    },

    OpenParen WhiteSpace? If WhiteSpace <cond:Item> WhiteSpace <then:TailCall> WhiteSpace <els:TailCall> WhiteSpace? ClosingParen => {
        Value::new_if(cond, then, els)
    },
};

BindingList: Vec<(u64, Value)> = {
    OpenParen WhiteSpace? ClosingParen => {
        vec![]
    },

    OpenParen WhiteSpace? <name:TextualSymbol> WhiteSpace <expr:Item> <rest:(WhiteSpace TextualSymbol WhiteSpace Item)*> WhiteSpace? ClosingParen => {
        let first = iter::once((name, expr));
        let rest = rest.into_iter().map(|(_, name, _, expr)| (name, expr));
        first.chain(rest).map(|(name, expr)| (interner.intern(name), expr)).collect()
    },
};

SpecialFormLet: Value = {
    OpenParen WhiteSpace? Let WhiteSpace <bindings:BindingList> <code:Code> WhiteSpace? ClosingParen => {
        Value::new_let(bindings, code)
    },
};

SpecialFormLetTailCall: Value = {
    OpenParen WhiteSpace? Let WhiteSpace <bindings:BindingList> <code:Code?> WhiteSpace <last:TailCall> WhiteSpace? ClosingParen => {
        let begin = code.into_iter().flat_map(|x| x.into_iter());
        let last = iter::once(last);
        let code: Vec<Value> = begin.chain(last).collect();
        Value::new_let(bindings, code)
    },
};

SpecialFormLoop: Value = {
    // without tail call
    OpenParen WhiteSpace? Loop WhiteSpace <bindings:BindingList> <code:Code> WhiteSpace? ClosingParen => {
        /*
        let begin = iter::once(Value::new_symbol(interner.intern("loop")));
        let bindings = iter::once(Value::new_list(&bindings));
        let code = code.into_iter();
        let values: Vec<Value> = begin.chain(bindings).chain(code).collect();
        Value::new_list(&values)
        */
        unimplemented!()
    },

    // with tail call
    OpenParen WhiteSpace? Loop WhiteSpace <bindings:BindingList> <code:Code?> WhiteSpace <last:TailCall> WhiteSpace? ClosingParen => {
        /*
        let begin = iter::once(Value::new_symbol(interner.intern("loop")));
        let bindings = iter::once(Value::new_list(&bindings));
        let code = code.into_iter().flat_map(|x| x.into_iter());
        let last = iter::once(last);
        let values: Vec<Value> = begin.chain(bindings).chain(code).chain(last).collect();
        Value::new_list(&values)
        */
        unimplemented!()
    },
};

LambdaArgs: Vec<u64> = {
    OpenParen WhiteSpace? ClosingParen => {
        vec![]
    },

    OpenParen WhiteSpace? <first:TextualSymbol> <args:(WhiteSpace TextualSymbol)*> WhiteSpace? ClosingParen => {
        let first = iter::once(first);
        let rest = args.into_iter().map(|(_, v)| v);
        first.chain(rest).map(|s| interner.intern(s)).collect()
    }
};

SpecialFormLambda: Value = {
    // without tail call
    OpenParen WhiteSpace? Lambda WhiteSpace <name:(TextualSymbol WhiteSpace)?> <bindings:LambdaArgs> <code:Code> WhiteSpace? ClosingParen => {
        let name = name.map(|(name, _)| name.into());
        Value::new_lambda(name, bindings, code)
    },

    // with tail call
    OpenParen WhiteSpace? Lambda WhiteSpace <name:(TextualSymbol WhiteSpace)?> <bindings:LambdaArgs> <code:Code?> WhiteSpace <last:TailCall> WhiteSpace? ClosingParen => {
        let name = name.map(|(name, _)| name.into());
        let last = iter::once(last);
        let code: Vec<Value> = code.into_iter().flat_map(|x| x.into_iter()).chain(last).collect();

        Value::new_lambda(name, bindings, code)
    },
};

SpecialFormRecur: Value = {
    OpenParen WhiteSpace? Recur <args:Code?> WhiteSpace? ClosingParen => {
        let begin = iter::once(Value::new_symbol(interner.intern("recur")));
        let args = args.into_iter().flat_map(|x| x.into_iter());
        let values: Vec<Value> = begin.chain(args).collect();
        Value::new_list(&values)
    },
};

SpecialFormQuote: Value = {
    OpenParen WhiteSpace? Quote WhiteSpace <SimpleItem> WhiteSpace? ClosingParen => {
        Value::new_quote(<>)
    },

    QuoteTick <SimpleItem> => {
        Value::new_quote(<>)
    },
};

SpecialForm: Value  = {
    SpecialFormBegin,
    SpecialFormDefine,
    SpecialFormIf,
    SpecialFormLet,
    SpecialFormLoop,
    SpecialFormLambda,
    SpecialFormQuote,
};
// --------------------------------------

// everything except for names of special forms and tail calls
NonSpecialItem: Value = {
    Primitive,
    NonSpecialSymbol,
    List,
    SpecialForm,
};

Item: Value = {
    NonSpecialItem,
    SpecialSymbol,
};

TailCall: Value = {
    SpecialFormRecur,
    SpecialFormBeginTailCall,
    SpecialFormIfTailCall,
    SpecialFormLetTailCall,
};

pub TopLevelItem: Vec<Value> = {
    WhiteSpace? <first:Item> <rest:Code?> WhiteSpace? => {
        // this parser needs a valid interner
        assert!(interner_valid, NO_INTERNER_ERROR_STRING);

        let first = iter::once(first);
        let rest = rest.into_iter().flat_map(|x| x.into_iter());
        first.chain(rest).collect()
    }
};
